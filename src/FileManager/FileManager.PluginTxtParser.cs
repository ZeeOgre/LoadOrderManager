using System.IO;
using System.Text;

namespace ZO.LoadOrderManager
{
    public static partial class FileManager
    {

        private static readonly Dictionary<string, string> HeaderInfo = new()
    {
        { "Vortex", "# This file was automatically generated by Vortex. Do not edit this file." },
        { "Starfield", "# This file is used by Starfield to keep track of your downloaded content." }
    };

        public static AggLoadInfo ParsePluginsTxt(AggLoadInfo? incomingAggLoadInfo = null, string? pluginsFile = null)
        {
            var aggLoadInfo = incomingAggLoadInfo ?? AggLoadInfo.Instance;
            var pluginsFilePath = pluginsFile ?? FileManager.PluginsFile;
            var defaultModGroup = aggLoadInfo.Groups.FirstOrDefault(g => g.GroupID == 1);

            if (defaultModGroup == null)
            {
                throw new Exception("Default ModGroup not found in AggLoadInfo.");
            }

            var loadOut = aggLoadInfo.ActiveLoadOut;
            var groupSet = aggLoadInfo.ActiveGroupSet;
            var enabledPlugins = new HashSet<long>();
            ModGroup currentGroup = defaultModGroup;

            var groupParentMapping = new Dictionary<long, ModGroup> { { 0, defaultModGroup } };
            // Get the max ordinals from the cached collections
            var (groupOrdinalTracker, pluginOrdinalTracker) = GetMaxOrdinalsFromCache(groupSet.GroupSetID, aggLoadInfo);

            // Initialize the dictionaries if they are empty
            if (!groupOrdinalTracker.Any())
            {
                groupOrdinalTracker[1] = 1;
            }

            if (!pluginOrdinalTracker.Any())
            {
                pluginOrdinalTracker[1] = 1;
            }

            try
            {
                var lines = File.ReadAllLines(pluginsFilePath);

                foreach (var line in lines)
                {
                    if (string.IsNullOrWhiteSpace(line) || System.Text.RegularExpressions.Regex.IsMatch(line, @"^#{1,2}(?!#)"))
                    {
                        continue;
                    }

                    if (line.StartsWith("###"))
                    {
                        int level = line.TakeWhile(c => c == '#').Count();
                        string groupInfo = line.Substring(level).Trim();
                        string[] groupParts = groupInfo.Split(new[] { "@@" }, StringSplitOptions.None);
                        string groupName = groupParts.Length > 0 ? groupParts[0].Trim() : string.Empty;
                        string groupDescription = groupParts.Length > 1 ? groupParts[1].Trim() : string.Empty;

                        // Determine the parent group
                        ModGroup parentGroup;
                        if (level == 3) // All groups at ### level have the default root as their parent
                        {
                            parentGroup = defaultModGroup;
                        }
                        else
                        {
                            // Ensure the parent group for the current level exists in the mapping
                            if (!groupParentMapping.TryGetValue(level - 1, out parentGroup))
                            {
                                // If the parent group is not found, skip processing this line
                                continue;
                            }
                        }

                        if (parentGroup == null)
                        {
                            continue;
                        }

                        if (!groupOrdinalTracker.ContainsKey(parentGroup.GroupID ?? 1))
                        {
                            groupOrdinalTracker[parentGroup.GroupID ?? 1] = 1;
                        }

                        var existingGroup = aggLoadInfo.Groups.FirstOrDefault(g => g.GroupName == groupName);
                        if (existingGroup != null)
                        {
                            if (existingGroup.GroupSetID == groupSet.GroupSetID)
                            {
                                existingGroup.Description = groupDescription;
                                currentGroup = existingGroup;
                            }
                            else
                            {
                                if (existingGroup.GroupID > 0)
                                {
                                    var newGroup = existingGroup.Clone(groupSet);
                                    newGroup.Description = groupDescription;
                                    currentGroup = newGroup.WriteGroup();
                                }
                                else
                                {
                                    currentGroup = existingGroup;
                                }
                                groupParentMapping[level] = currentGroup;
                                groupOrdinalTracker[parentGroup.GroupID ?? 1]++;
                                if (!pluginOrdinalTracker.ContainsKey(currentGroup.GroupID ?? 1))
                                {
                                    pluginOrdinalTracker[currentGroup.GroupID ?? 1] = 1;
                                }
                                aggLoadInfo.Groups.Add(currentGroup); // Add new group to aggLoadInfo.Groups
                            }
                        }
                        else
                        {
                            var newGroup = new ModGroup(null, groupName, groupDescription, parentGroup.GroupID, groupOrdinalTracker[parentGroup.GroupID ?? 1], groupSet.GroupSetID);
                            currentGroup = newGroup.WriteGroup();
                            groupParentMapping[level] = currentGroup;
                            groupOrdinalTracker[parentGroup.GroupID ?? 1]++;
                            if (!pluginOrdinalTracker.ContainsKey(currentGroup.GroupID ?? 1))
                            {
                                pluginOrdinalTracker[currentGroup.GroupID ?? 1] = 1;
                            }
                            aggLoadInfo.Groups.Add(currentGroup); // Add new group to aggLoadInfo.Groups
                        }

                        // Reset plugin ordinal tracker for the new group
                        pluginOrdinalTracker[currentGroup.GroupID ?? 1] = 1;

                        continue;
                    }


                    bool isEnabled = line.StartsWith("*");
                    string pluginName = line.TrimStart('*').Trim();
                    var existingPlugin = aggLoadInfo.Plugins.FirstOrDefault(p => p.PluginName == pluginName);
                    if (existingPlugin != null)
                    {
                        existingPlugin.GroupID = currentGroup.GroupID;
                        existingPlugin.GroupOrdinal = pluginOrdinalTracker[currentGroup.GroupID ?? 1];
                    }
                    else
                    {
                        var plugin = new Plugin
                        {
                            PluginName = pluginName,
                            GroupID = currentGroup.GroupID,
                            GroupOrdinal = pluginOrdinalTracker[currentGroup.GroupID ?? 1],
                            GroupSetID = groupSet.GroupSetID
                        };

                        var completePlugin = plugin.WriteMod();
                        pluginOrdinalTracker[currentGroup.GroupID ?? 1]++;
                        if (completePlugin != null)
                        {
                            loadOut.LoadPlugins(new List<Plugin> { completePlugin });
                            if (isEnabled)
                            {
                                _ = enabledPlugins.Add(completePlugin.PluginID);
                            }
                            aggLoadInfo.Plugins.Add(completePlugin);
                        }
                    }
                }

                // Directly update the enabled plugins in the loadOut
                loadOut.UpdateEnabledPlugins(enabledPlugins);
                //aggLoadInfo.ProfilePlugins.Items.Clear();
                foreach (var pluginID in enabledPlugins)
                {
                    _ = aggLoadInfo.ProfilePlugins.Items.Add((loadOut.ProfileID, pluginID));
                }

                // Refresh GroupSetPlugins, GroupSetGroups, and ProfilePlugins
                //aggLoadInfo.RefreshMetadataFromDB();
            }
            catch (Exception)
            {
                // Handle exception
            }

            return aggLoadInfo;
        }

        public static (Dictionary<long, long> groupOrdinalTracker, Dictionary<long, long> pluginOrdinalTracker) GetMaxOrdinalsFromCache(long groupSetID, AggLoadInfo aggLoadInfo)
        {
            var groupOrdinalTracker = new Dictionary<long, long>();
            var pluginOrdinalTracker = new Dictionary<long, long>();

            // Get the maximum ordinals for groups
            var maxGroupOrdinals = aggLoadInfo.GroupSetGroups.Items
                .Where(item => item.groupSetID == groupSetID)
                .GroupBy(item => item.groupID)
                .Select(g => new { GroupID = g.Key, MaxOrdinal = g.Max(item => item.Ordinal) + 1 });

            foreach (var group in maxGroupOrdinals)
            {
                groupOrdinalTracker[group.GroupID] = group.MaxOrdinal;
            }

            // Get the maximum ordinals for plugins
            var maxPluginOrdinals = aggLoadInfo.GroupSetPlugins.Items
                .Where(item => item.groupSetID == groupSetID)
                .GroupBy(item => item.groupID)
                .Select(g => new { GroupID = g.Key, MaxOrdinal = g.Max(item => item.Ordinal) + 1 });

            foreach (var plugin in maxPluginOrdinals)
            {
                pluginOrdinalTracker[plugin.GroupID] = plugin.MaxOrdinal;
            }

            return (groupOrdinalTracker, pluginOrdinalTracker);
        }


        public static void ProducePluginsTxt(LoadOrdersViewModel viewModel, string? outputFileName = null)
        {
            if (viewModel == null || viewModel.Items == null || !viewModel.Items.Any())
            {
                throw new ArgumentException("The viewModel or its Items collection cannot be null or empty.");
            }

            var sb = new StringBuilder();

            // Retrieve necessary information for the header
            var groupSetName = AggLoadInfo.Instance.ActiveGroupSet.GroupSetName ?? "Default_GroupSet";
            var loadOutName = AggLoadInfo.Instance.ActiveLoadOut.Name ?? "Default_Profile";
            var dateTimeNow = DateTime.Now.ToString("o");

            string defaultFileName;
            string pluginsFilePath;

            if (outputFileName == null)
            {
                defaultFileName = $"Plugins_{groupSetName}_{loadOutName}.txt";
                pluginsFilePath = Path.Combine(FileManager.GameLocalAppDataFolder, defaultFileName);
            }
            else
            {
                defaultFileName = Path.GetFileName(outputFileName);
                pluginsFilePath = outputFileName;
            }

            // Custom header with the actual filename
            _ = sb.AppendLine($"# {defaultFileName} produced by ZeeOgre's LoadOutManager using Group Set {groupSetName} and profile {loadOutName} on {dateTimeNow}");
            _ = sb.AppendLine("##--------------------------------------------------------------------------------------------------------------------------------------------------------##");

            // Process each item in the viewModel
            foreach (var item in viewModel.Items)
            {
                AppendItemToStringBuilder(item, sb, isRoot: true);
            }

            // Custom footer
            _ = sb.AppendLine();
            _ = sb.AppendLine($"# End of {defaultFileName}");

            // Write to file
            File.WriteAllText(pluginsFilePath, sb.ToString());
        }

        private static void AppendItemToStringBuilder(LoadOrderItemViewModel item, StringBuilder sb, bool isRoot = false)
        {
            // Print active plugins with a prefix '*'
            if (item.EntityType == EntityType.Plugin)
            {
                _ = sb.AppendLine(item.IsActive ? $"*{item.DisplayName}" : item.DisplayName);
            }

            // Process children if any
            if (item.Children != null && item.Children.Any())
            {
                // First, append all child plugins
                foreach (var plugin in item.Children.Where(c => c.EntityType == EntityType.Plugin))
                {
                    AppendItemToStringBuilder(plugin, sb);
                }

                // Then, append all child groups
                foreach (var group in item.Children.Where(c => c.EntityType == EntityType.Group))
                {
                    var groupObject = ZO.LoadOrderManager.EntityTypeHelper.GetUnderlyingObject(group) as ModGroup;
                    if (groupObject != null)
                    {
                        if (groupObject.GroupID <= 0)
                        {
                            continue;
                        }
                        // Skip appending the root group itself but process its children
                        if (groupObject.GroupID != 1)
                        {
                            _ = sb.AppendLine();
                            _ = sb.AppendLine(groupObject.ToPluginsString());
                        }
                        AppendItemToStringBuilder(group, sb);
                    }
                }
            }
        }

    }
}
