<metro:MetroWindow x:Class="ZO.LoadOrderManager.LoadOrderWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
        Style="{StaticResource MaterialDesignWindow}"
        xmlns:local="clr-namespace:ZO.LoadOrderManager"
        Title="LoadOrderWindow" Height="600" Width="1366"
        Loaded="LoadOrderWindow_Loaded">

    <Window.DataContext>
        <local:LoadOrderWindowViewModel />
    </Window.DataContext>

    <Window.Resources>
        <local:BethesdaUrlConverter x:Key="BethesdaUrlConverter"/>
        <local:NexusUrlConverter x:Key="NexusUrlConverter"/>
        <local:GroupIDToIsEnabledConverter x:Key="GroupIDToIsEnabledConverter"/>
        <local:GroupIDToIsExpandedConverter x:Key="GroupIDToIsExpandedConverter"/>
        <local:ItemStateToColorConverter x:Key="ItemStateToColorConverter"/>


        <HierarchicalDataTemplate x:Key="GroupTemplate" ItemsSource="{Binding Children}">
            <Grid>
                <!-- Set the Background using the ItemStateToColorConverter -->
                <Grid.Background>
                    <MultiBinding Converter="{StaticResource ItemStateToColorConverter}">
                        <Binding Path="IsSelected"/>
                        <Binding Path="IsHighlighted"/>
                        <Binding Path="EntityType"/>
                        <MultiBinding.ConverterParameter>
                            Background
                        </MultiBinding.ConverterParameter>
                    </MultiBinding>
                </Grid.Background>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition Width="*" MinWidth="175"/>
                    <ColumnDefinition Width="2*" MinWidth="375"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="250"/>
                    <ColumnDefinition Width="100"/>
                </Grid.ColumnDefinitions>

                <!-- Set the Foreground for the TextBlock using the ItemStateToColorConverter -->
                <TextBlock Text="{Binding DisplayName}" Margin="5" Grid.Column="1" Grid.ColumnSpan="5" HorizontalAlignment="Left">
                    <TextBlock.Foreground>
                        <MultiBinding Converter="{StaticResource ItemStateToColorConverter}">
                            <Binding Path="IsSelected"/>
                            <Binding Path="IsHighlighted"/>
                            <Binding Path="EntityType"/>
                            <MultiBinding.ConverterParameter>
                                Foreground
                            </MultiBinding.ConverterParameter>
                        </MultiBinding>
                    </TextBlock.Foreground>
                </TextBlock>
            </Grid>
        </HierarchicalDataTemplate>


        <DataTemplate x:Key="PluginTemplate">
            <Grid>
                <!-- Set the Background using the ItemStateToColorConverter -->
                <Grid.Background>
                    <MultiBinding Converter="{StaticResource ItemStateToColorConverter}">
                        <Binding Path="IsSelected"/>
                        <Binding Path="IsHighlighted"/>
                        <Binding Path="EntityType"/>
                        <MultiBinding.ConverterParameter>
                            Background
                        </MultiBinding.ConverterParameter>
                    </MultiBinding>
                </Grid.Background>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition Width="*" MinWidth="175"/>
                    <ColumnDefinition Width="2*" MinWidth="375"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="250"/>
                    <ColumnDefinition Width="100"/>
                </Grid.ColumnDefinitions>

                <!-- Checkbox for IsActive -->
                <CheckBox IsChecked="{Binding IsActive, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                          Tag="checkbox"
                          Command="{Binding DataContext.ToggleEnableCommand, RelativeSource={RelativeSource AncestorType=Window}}" 
                          CommandParameter="{Binding}" Grid.Column="0" Margin="5" HorizontalAlignment="Stretch">
                    <CheckBox.Foreground>
                        <MultiBinding Converter="{StaticResource ItemStateToColorConverter}">
                            <Binding Path="IsSelected"/>
                            <Binding Path="IsHighlighted"/>
                            <Binding Path="EntityType"/>
                            <MultiBinding.ConverterParameter>
                                Foreground
                            </MultiBinding.ConverterParameter>
                        </MultiBinding>
                    </CheckBox.Foreground>
                </CheckBox>

                <!-- Set the Foreground for the PluginName TextBlock using the ItemStateToColorConverter -->
                <TextBlock Text="{Binding PluginData.PluginName}" Grid.Column="1" Margin="5" HorizontalAlignment="Left">
                    <TextBlock.Foreground>
                        <MultiBinding Converter="{StaticResource ItemStateToColorConverter}">
                            <Binding Path="IsSelected"/>
                            <Binding Path="IsHighlighted"/>
                            <Binding Path="EntityType"/>
                            <MultiBinding.ConverterParameter>
                                Foreground
                            </MultiBinding.ConverterParameter>
                        </MultiBinding>
                    </TextBlock.Foreground>
                </TextBlock>

                <!-- Set the Foreground for the PluginDescription TextBlock using the ItemStateToColorConverter -->
                <TextBlock Text="{Binding PluginData.Description}" Grid.Column="2" Margin="5" HorizontalAlignment="Left">
                    <TextBlock.Foreground>
                        <MultiBinding Converter="{StaticResource ItemStateToColorConverter}">
                            <Binding Path="IsSelected"/>
                            <Binding Path="IsHighlighted"/>
                            <Binding Path="EntityType"/>
                            <MultiBinding.ConverterParameter>
                                Foreground
                            </MultiBinding.ConverterParameter>
                        </MultiBinding>
                    </TextBlock.Foreground>
                </TextBlock>

                <!-- Achievement CheckBox -->
                <CheckBox IsChecked="{Binding PluginData.Achievements, Mode=OneWay}" IsEnabled="False" Grid.Column="3" Margin="5" HorizontalAlignment="Left">
                    <CheckBox.Foreground>
                        <MultiBinding Converter="{StaticResource ItemStateToColorConverter}">
                            <Binding Path="IsSelected"/>
                            <Binding Path="IsHighlighted"/>
                            <Binding Path="EntityType"/>
                            <MultiBinding.ConverterParameter>
                                Foreground
                            </MultiBinding.ConverterParameter>
                        </MultiBinding>
                    </CheckBox.Foreground>
                </CheckBox>
                <CheckBox IsChecked="{Binding PluginData.Achievements, Mode=OneWay}" IsEnabled="False" Grid.Column="3" Margin="5" HorizontalAlignment="Left"/>
                <TextBlock Text="{Binding PluginData.DTStamp}" Grid.Column="4" Margin="5" HorizontalAlignment="Left"/>

                <!-- Hyperlink with BethesdaID -->
                <TextBlock Grid.Column="5" Margin="5" HorizontalAlignment="Left">
                    <Hyperlink NavigateUri="{Binding PluginData.BethesdaID, Converter={StaticResource BethesdaUrlConverter}}" RequestNavigate="Hyperlink_RequestNavigate">
                        <TextBlock Text="{Binding PluginData.BethesdaID, TargetNullValue='Bethesda', FallbackValue='Bethesda'}"/>
                    </Hyperlink>
                </TextBlock>

                <!-- Hyperlink with NexusID -->
                <TextBlock Grid.Column="6" Margin="5" HorizontalAlignment="Left">
                    <Hyperlink NavigateUri="{Binding PluginData.NexusID, Converter={StaticResource NexusUrlConverter}}" RequestNavigate="Hyperlink_RequestNavigate">
                        <TextBlock Text="{Binding PluginData.NexusID, TargetNullValue='Nexus', FallbackValue='Nexus'}"/>
                    </Hyperlink>
                </TextBlock>
            </Grid>
        </DataTemplate>



        <local:EntityTypeTemplateSelector x:Key="EntityTypeTemplateSelector"
                                          GroupTemplate="{StaticResource GroupTemplate}"
                                          PluginTemplate="{StaticResource PluginTemplate}" />
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="5*"/>
            <RowDefinition Height="2*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Menu Grid.Row="0">
            <MenuItem Header="_File">
                <MenuItem Header="Import _Plugins.txt file" Command="{Binding ImportPluginsCommand}"/>
                <MenuItem Header="Import _ContextCatalog.txt" Command="{Binding ImportContextCatalogCommand}"/>
                <MenuItem Header="Scan _Game Folder" Command="{Binding ScanGameFolderCommand}" />
                <MenuItem Header="_Save Plugins.txt" Command="{Binding SavePluginsCommand}"/>
                <MenuItem Header="Save _Active Loadout to database" Command="{Binding SaveCommand}"/>
                <MenuItem Header="Save as _new loadout" Command="{Binding SaveAsNewLoadoutCommand}"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="_Edit the highlighted item" Command="{Binding EditHighlightedItemCommand}"/>
                <MenuItem Header="Edit _Plugins.txt" Command="{Binding EditPluginsCommand}"/>
                <MenuItem Header="Edit _ContentCatalog.txt" Command="{Binding EditContentCatalogCommand}"/>
            </MenuItem>
            <MenuItem Header="_Open">
                <MenuItem Header="Open _Game Folder" Command="{Binding OpenGameFolderCommand}"/>
                <MenuItem Header="Open Game _Settings" Command="{Binding OpenGameSettingsCommand}"/>
                <MenuItem Header="Open Game _LocalAppData Folder" Command="{Binding OpenGameLocalAppDataCommand}"/>
                <MenuItem Header="Open _Application Data folder" Command="{Binding OpenAppDataFolderCommand}"/>
            </MenuItem>
            <MenuItem Header="_Settings">
                <MenuItem Header="_Settings Window" Command="{Binding SettingsWindowCommand}"/>
                <MenuItem Header="_Import from yaml" Command="{Binding ImportFromYamlCommand}"/>
            </MenuItem>
        </Menu>

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="30"/>
                <ColumnDefinition Width="*" MinWidth="175"/>
                <!-- Set MinWidth -->
                <ColumnDefinition Width="2*" MinWidth="375"/>
                <!-- Use * for dynamic width -->
                <ColumnDefinition Width="30"/>
                <ColumnDefinition Width="150"/>
                <ColumnDefinition Width="250"/>
                <ColumnDefinition Width="100"/>
            </Grid.ColumnDefinitions>
            <TextBlock Text="Enabled" Grid.Column="0" Margin="5" VerticalAlignment="Center" HorizontalAlignment="Left"/>
            <TextBlock Text="PluginName" Grid.Column="1" Margin="5" VerticalAlignment="Center" HorizontalAlignment="Left"/>
            <TextBlock Text="Description" Grid.Column="2" Margin="5" VerticalAlignment="Center"/>
            <TextBlock Text="Ach. Safe" Grid.Column="3" Margin="5" VerticalAlignment="Center" HorizontalAlignment="Left"/>
            <TextBlock Text="DTStamp" Grid.Column="4" Margin="5" VerticalAlignment="Center" HorizontalAlignment="Center"/>
            <TextBlock Text="BethesdaID" Grid.Column="5" Margin="5" VerticalAlignment="Center" HorizontalAlignment="Center"/>
            <TextBlock Text="NexusID" Grid.Column="6" Margin="5" VerticalAlignment="Center" HorizontalAlignment="Center"/>
        </Grid>

        <local:MultiSelectTreeView x:Name="LoadOrderTreeView" Grid.Row="2" ItemsSource="{Binding LoadOrders.Items}" 
   ItemTemplateSelector="{StaticResource EntityTypeTemplateSelector}"
   HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"
   SelectedItems="{Binding SelectedItems, Mode=TwoWay}"
   KeyDown="TreeView_KeyDown"
   MouseRightButtonDown="TreeView_MouseRightButtonDown"
   Loaded="LoadOrderTreeView_Loaded">

            <TreeView.Resources>
                <ContextMenu x:Key="ItemContextMenu">
                    <MenuItem Header="Edit" Command="{Binding DataContext.EditCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Copy" Command="{Binding DataContext.CopyTextCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Move Up" Command="{Binding DataContext.MoveUpCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Move Down" Command="{Binding DataContext.MoveDownCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Change Group">
                        <MenuItem.ItemsSource>
                            <Binding Path="DataContext.ValidGroups" RelativeSource="{RelativeSource AncestorType=TreeView}"/>
                        </MenuItem.ItemsSource>
                        <MenuItem.ItemTemplate>
                            <DataTemplate>
                                <MenuItem Header="{Binding GroupName}" Command="{Binding DataContext.ChangeGroupCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding GroupID}" />
                            </DataTemplate>
                        </MenuItem.ItemTemplate>
                    </MenuItem>
                    <MenuItem Header="Delete" Command="{Binding DataContext.DeleteCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Enable/Disable" Tag="menu" Command="{Binding DataContext.ToggleEnableCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding}" />
                </ContextMenu>
            </TreeView.Resources>

            <TreeView.ItemContainerStyle>
                <Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                    <!-- Ensure we inherit ModernWPF styling -->
                    <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}" />
                    <Setter Property="IsExpanded" Value="{Binding GroupID, Converter={StaticResource GroupIDToIsExpandedConverter}}"/>
                    <Setter Property="FontSize" Value="14" />
                    <Setter Property="Padding" Value="5" />
                </Style>
            </TreeView.ItemContainerStyle>

        </local:MultiSelectTreeView>


        <local:MultiSelectTreeView x:Name="CachedGroupSetTreeView" Grid.Row="3" ItemsSource="{Binding CachedGroupSetLoadOrders.Items}" 
   ItemTemplateSelector="{StaticResource EntityTypeTemplateSelector}"
   HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"
   SelectedItems="{Binding SelectedCachedItems, Mode=TwoWay}"
   Loaded="CachedGroupSetTreeView_Loaded"
   KeyDown="TreeView_KeyDown"
   MouseRightButtonDown="TreeView_MouseRightButtonDown">

            <TreeView.Resources>
                <ContextMenu x:Key="ItemContextMenu">
                    <MenuItem Header="Edit" Command="{Binding DataContext.EditCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Copy" Command="{Binding DataContext.CopyTextCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding}" />
                    <!--<MenuItem Header="Move Up" Command="{Binding DataContext.MoveUpCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Move Down" Command="{Binding DataContext.MoveDownCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding}" />-->
                    <MenuItem Header="Change Group">
                        <MenuItem.ItemsSource>
                            <Binding Path="DataContext.ValidGroups" RelativeSource="{RelativeSource AncestorType=TreeView}"/>
                        </MenuItem.ItemsSource>
                        <MenuItem.ItemTemplate>
                            <DataTemplate>
                                <MenuItem Header="{Binding GroupName}" Command="{Binding DataContext.ChangeGroupCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding GroupID}" />
                            </DataTemplate>
                        </MenuItem.ItemTemplate>
                    </MenuItem>
                    <!--<MenuItem Header="Delete" Command="{Binding DataContext.DeleteCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Enable/Disable" Tag="menu" Command="{Binding DataContext.ToggleEnableCommand, RelativeSource={RelativeSource AncestorType=TreeView}}" CommandParameter="{Binding}" />-->
                </ContextMenu>
            </TreeView.Resources>

            <TreeView.ItemContainerStyle>
                <Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                    <!-- Ensure we inherit ModernWPF styling -->
                    <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}" />
                    <Setter Property="IsExpanded" Value="{Binding GroupID, Converter={StaticResource GroupIDToIsExpandedConverter}}"/>
                    <Setter Property="FontSize" Value="14" />
                    <Setter Property="Padding" Value="5" />
                </Style>
            </TreeView.ItemContainerStyle>

        </local:MultiSelectTreeView>


        <Grid Grid.Row="4">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*"/>
                <ColumnDefinition Width="4*"/>
                <ColumnDefinition Width="2*"/>
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Column="0" Orientation="Horizontal" HorizontalAlignment="Left">
                <Button Width="50" Height="50" 
                        Command="{Binding MoveUpCommand}" 
                        Margin="5">
                    <Button.Content>
                        <TextBlock FontFamily="Segoe UI Symbol" FontSize="30" Text="&#x25B2;"/>
                    </Button.Content>
                </Button>

                <Button Width="50" Height="50" 
                        Command="{Binding MoveDownCommand}" 
                        Margin="5">
                    <Button.Content>
                        <TextBlock FontFamily="Segoe UI Symbol" FontSize="30" Text="&#x25BC;"/>
                    </Button.Content>
                </Button>
            </StackPanel>

            <StackPanel Grid.Column="1" Orientation="Vertical" HorizontalAlignment="Center">
                <!-- ComboBox for GroupSets -->
                <!-- ComboBox for GroupSets -->
                <ComboBox x:Name="cmbGroupSet" Grid.Row="1" 
                  ItemsSource="{Binding GroupSets}" 
                  SelectedItem="{Binding SelectedGroupSet, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding GroupSetName}" />
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
                
                 <Button Content="Edit GroupSets"
         Command="{Binding EditGroupSetCommand}" 
         CommandParameter="{Binding ElementName=cmbGroupSet}"
         Width="200" 
         HorizontalAlignment="Center" 
         Margin="10,5,10,5" VerticalAlignment="Center"/>
            </StackPanel>

            <StackPanel Grid.Column="2" Orientation="Vertical" HorizontalAlignment="Center">
                <!-- ComboBox for LoadOuts -->
                <ComboBox x:Name="cmbLoadOut" Grid.Row="2"
          ItemsSource="{Binding LoadOuts}"
          SelectedItem="{Binding SelectedLoadOut, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Name}" />
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>

                <Button Content="Edit LoadOuts"
            Command="{Binding EditLoadOutCommand}"
            CommandParameter="{Binding ElementName=cmbLoadOut}"
            Width="200"
            HorizontalAlignment="Left" 
            Margin="10,5,10,5" VerticalAlignment="Center"/>
            </StackPanel>



        </Grid>
        <Grid Grid.Row="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="409*"/>
                <ColumnDefinition Width="224*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="0">
                <TextBox x:Name="SearchBox" Width="200" Margin="5,5,5,5" Text="{Binding SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                         KeyDown="SearchBox_KeyDown"/>
                <Button x:Name="SearchButton" Content="Search" Command="{Binding SearchCommand}" Margin="5,5,5,5"/>
                <Button x:Name="CompareButton" Content="Compare" Width="70" Margin="5,5,5,5" Command="{Binding CompareCommand}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Grid.Column="2">
                <Button x:Name="SaveButton" Content="Save" Width="70" Margin="25,5,5,5" Command="{Binding SavePluginsCommand}"/>
            </StackPanel>
        </Grid>

        <StatusBar Grid.Row="6" Grid.ColumnSpan="6">
            <StatusBarItem HorizontalContentAlignment="Stretch">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <!-- Status Message -->
                    <TextBlock Text="{Binding StatusMessage}" Grid.Column="0" VerticalAlignment="Center" />

                    <!-- Warning Message -->
                    <TextBox x:Name="WarningTextBox" 
                     Width="400" 
                     IsReadOnly="True" 
                     Visibility="{Binding IsWarningActive, Converter={StaticResource BooleanToVisibilityConverter}}" 
                     Text="{Binding WarningMessage}" 
                     Margin="5,0,0,0" 
                     BorderThickness="0" 
                     Grid.Column="1" 
                     VerticalAlignment="Center" />

                    <!-- Status Light -->
                    <Ellipse x:Name="StatusLight" Width="16" Height="16" 
                     HorizontalAlignment="Right" VerticalAlignment="Center" 
                     MaxWidth="50" 
                     Margin="0,0,10,0" Fill="{Binding StatusLightColor}" Grid.Column="2">
                        <Ellipse.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Refresh" Command="{Binding RefreshCommand}" />
                            </ContextMenu>
                        </Ellipse.ContextMenu>
                    </Ellipse>
                </Grid>
            </StatusBarItem>
        </StatusBar>



    </Grid>
</metro:MetroWindow>